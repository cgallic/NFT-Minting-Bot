/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AdidasMinter, AdidasMinterInterface } from "../AdidasMinter";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
];

const _bytecode =
  "0x60806040527328472a58a490c5e09a238847f66a68a47cc76f0f6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603f8060656000396000f3fe6080604052600080fdfea2646970667358221220b8f5fc70a19c75f87a8274384ffe0eb5932d0c4545295a2065671b951f3a28d364736f6c63430008040033";

type AdidasMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdidasMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AdidasMinter__factory extends ContractFactory {
  constructor(...args: AdidasMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AdidasMinter";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<AdidasMinter> {
    return super.deploy(overrides || {}) as Promise<AdidasMinter>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AdidasMinter {
    return super.attach(address) as AdidasMinter;
  }
  connect(signer: Signer): AdidasMinter__factory {
    return super.connect(signer) as AdidasMinter__factory;
  }
  static readonly contractName: "AdidasMinter";
  public readonly contractName: "AdidasMinter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdidasMinterInterface {
    return new utils.Interface(_abi) as AdidasMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AdidasMinter {
    return new Contract(address, _abi, signerOrProvider) as AdidasMinter;
  }
}
